import ast
import asyncio
import os
from typing import Dict, Optional

import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile

API_BASE = 'http://backend:8000/api/v1'

user_tokens: Dict[int, str] = {}

TOKEN = os.getenv('TELEGRAM_TOKEN', '1234567890:ABCdefGHIJKlmNoPQRsTUVwxyZ')

BOT_SECRET = os.environ.get('BOT_SECRET', '')
from aiogram.client.session.aiohttp import AiohttpSession

session = AiohttpSession(timeout=50)
bot = Bot(token=TOKEN, session=session)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


class Form(StatesGroup):
    auth = State()
    login = State()
    top_up = State()
    purchase_status = State()
    pred_paid = State()
    pred_free = State()
    pred_id = State()


async def api_post(path: str, token: str, json_data: dict) -> tuple[int, dict]:
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
        'X-Bot-Secret': BOT_SECRET,
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(f'{API_BASE}{path}', json=json_data, headers=headers) as resp:
            return resp.status, await resp.json()


async def api_get(path: str, token: str) -> tuple[int, dict]:
    headers = {
        'Authorization': f'Bearer {token}',
        'X-Bot-Secret': BOT_SECRET,
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(f'{API_BASE}{path}', headers=headers) as resp:
            return resp.status, await resp.json()


def main_menu() -> types.ReplyKeyboardMarkup:
    keyboard = [
        [
            types.KeyboardButton(text='‚ìò –ò–Ω—Ñ–æ'),
            types.KeyboardButton(text='üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'),
        ],
        [
            types.KeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å'),
            types.KeyboardButton(text='üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'),
        ],
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


@router.message(F.text == '/start')
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    await message.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: user1 password123'
    )
    await state.set_state(Form.auth)


@router.message(Form.auth)
async def process_auth(message: types.Message, state: FSMContext) -> None:
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Å–ª–æ–≤–∞: –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
        return

    username, password = parts
    payload = {'username': username, 'password': password}
    status, data = await api_post('/auth/register', token='', json_data=payload)

    if status != 200:
        await message.reply(f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data.get("detail", data)}')
        return

    bot_token = data['bot_token']
    user_tokens[message.from_user.id] = bot_token

    await message.reply(
        '–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n'
        '–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.',
        reply_markup=main_menu()
    )
    await state.clear()


@router.message(F.text == '‚ìò –ò–Ω—Ñ–æ')
async def info_handler(message: types.Message) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    if not token:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
        return

    status_code, data = await api_get('/auth/me', token)
    if status_code != 200:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}')
        return

    username = data.get('username')
    status_ = data.get('status')
    balance = data.get('balance')
    date_end = data.get('status_date_end')

    await message.reply(
        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n'
        f'üîñ –°—Ç–∞—Ç—É—Å: {status_}\n'
        f'üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n'
        f'üóìÔ∏è –°—Ä–æ–∫ –¥–æ: {date_end}'
    )


@router.message(F.text == 'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
async def login_handler(message: types.Message, state: FSMContext) -> None:
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
    await state.set_state(Form.login)


@router.message(Form.login)
async def process_login(message: types.Message, state: FSMContext) -> None:
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Å–ª–æ–≤–∞: –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
        return

    username, password = parts
    payload = {'username': username, 'password': password}
    status, data = await api_post('/auth/login', token='', json_data=payload)

    if status != 200:
        await message.reply(f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {data.get("detail", data)}')
        return

    bot_token = data['bot_token']
    user_tokens[message.from_user.id] = bot_token

    await message.reply('–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.', reply_markup=main_menu())
    await state.clear()


@router.message(F.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
async def balance_menu(message: types.Message) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    if not token:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
        return

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='bal_topup')
            ],
            [
                types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='bal_purchase'),
                types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è', callback_data='bal_history')
            ],
        ]
    )
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º:', reply_markup=kb)


@router.callback_query(F.data.startswith('bal_'))
async def process_balance_cb(callback: types.CallbackQuery, state: FSMContext) -> None:
    tg_id = callback.from_user.id
    token = user_tokens.get(tg_id)
    action = callback.data

    if not token:
        await callback.message.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
        await callback.answer()
        return

    if action == 'bal_topup':
        await callback.message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
        await state.set_state(Form.top_up)
        await callback.answer()
        return

    elif action == 'bal_purchase':
        kb = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text='silver'),
                    types.KeyboardButton(text='gold'),
                    types.KeyboardButton(text='diamond'),
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await callback.message.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:',
            reply_markup=kb
        )

        await state.set_state(Form.purchase_status)
        await callback.answer()
        return

    elif action == 'bal_history':
        payload = {'amount': 5}
        status, data = await api_post('/balance/history', token, payload)
        if status != 200:
            await callback.message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}')
        else:
            msgs = []
            for item in data['history']:
                txt = (
                    f'üíµ {"+" if item["amount"] > 0 else ""}{item["amount"]} | '
                    f'{item["description"]} | {item["timestamp"]}'
                )
                msg = await callback.message.reply(txt)
                msgs.append(msg)

            await callback.answer()

            async def delete_later(messages_to_delete):
                await asyncio.sleep(30)
                for m in messages_to_delete:
                    try:
                        await m.delete()
                    except:
                        pass

            await asyncio.create_task(delete_later(msgs))
            return


@router.message(Form.top_up)
async def process_top_up(message: types.Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    try:
        amount = float(message.text.strip())
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return

    payload = {'amount': amount}
    status, data = await api_post('/balance/top_up', token, payload)
    if status != 200:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}')
    else:
        await message.reply(
            f'–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {data["amount"]}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data["new_balance"]}',
            reply_markup=main_menu()
        )
    await state.clear()


@router.message(Form.purchase_status)
async def process_purchase_status(message: types.Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    status_str = message.text.strip().lower()
    if status_str not in ('silver', 'gold', 'diamond'):
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í–≤–µ–¥–∏—Ç–µ silver, gold –∏–ª–∏ diamond.')
        return

    payload = {'status': status_str}
    status_code, data = await api_post('/balance/purchase', token, payload)
    if status_code != 200:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}')
    else:
        await message.reply(
            f'–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {data["status"]}\n'
            f'–°—Ä–æ–∫ –¥–æ: {data["status_date_end"]}\n'
            f'–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {data["remaining_balance"]}',
            reply_markup=main_menu()
        )
    await state.clear()


@router.message(F.text == 'üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
async def prediction_menu(message: types.Message) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    if not token:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
        return

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text='–ü–ª–∞—Ç–Ω–æ–µ', callback_data='pred_paid'),
                types.InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ', callback_data='pred_free')
            ],
            [
                types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –ø–æ ID', callback_data='pred_get'),
                types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è', callback_data='pred_history')
            ],
            [
                types.InlineKeyboardButton(text='–ö–∞—Ä—Ç—ã', callback_data='pred_map')
            ]
        ]
    )
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:', reply_markup=kb)


@router.callback_query(F.data.startswith('pred_'))
async def process_pred_cb(callback: types.CallbackQuery, state: FSMContext) -> None:
    tg_id = callback.from_user.id
    token = user_tokens.get(tg_id)
    action = callback.data

    if not token:
        await callback.message.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.')
        await callback.answer()
        return
    if action == 'pred_map':
        base_dir = os.path.dirname(__file__)
        maps_dir = os.path.join(base_dir, 'maps')
        if not os.path.isdir(maps_dir):
            await callback.message.reply('–ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        else:
            files = [f for f in os.listdir(maps_dir) if f.lower().endswith(('.jpg', '.jpeg'))]
            if not files:
                await callback.message.reply('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            else:
                for filename in files:
                    path = os.path.join(maps_dir, filename)

                    photo = FSInputFile(path)
                    await callback.message.reply_photo(photo)
        await callback.answer()
        return
    if action == 'pred_paid':
        await callback.message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–π–æ–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:')
        await state.set_state(Form.pred_paid)

    elif action == 'pred_free':
        await callback.message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–π–æ–Ω–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:')
        await state.set_state(Form.pred_free)

    elif action == 'pred_get':
        await callback.message.reply('–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:')
        await state.set_state(Form.pred_id)

    elif action == 'pred_history':
        payload = {'amount': 5}
        status_code, data = await api_post('/prediction/history', token, payload)
        if status_code != 200:
            await callback.message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}')
        else:
            msgs = []
            for item in data['history']:
                txt = (
                    f'üÜî {item["id"]} | {item["city"]} | —Ä–∞–π–æ–Ω {item["district"]} | '
                    f'—á–∞—Å {item["hour"]} | —Å—Ç–∞—Ç—É—Å {item["status"]} | {item["timestamp"]}'
                )
                msg = await callback.message.reply(txt)
                msgs.append(msg)

            await callback.answer()

            async def delete_later(messages_to_delete):
                await asyncio.sleep(30)
                for m in messages_to_delete:
                    try:
                        await m.delete()
                    except:
                        pass

            asyncio.create_task(delete_later(msgs))

    await callback.answer()


@router.message(Form.pred_paid)
async def process_pred_paid(message: types.Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    try:
        district = int(message.text.strip())
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä–∞–π–æ–Ω–∞.')
        return

    payload = {'district': district}
    status_code, data = await api_post('/prediction/nyc_cost', token, payload)
    if status_code == 402:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.', reply_markup=main_menu())
    elif status_code == 429:
        await message.reply('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.', reply_markup=main_menu())
    elif status_code != 201:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}', reply_markup=main_menu())
    else:
        await message.reply(f'–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, ID = {data["id"]}', reply_markup=main_menu())
    await state.clear()


@router.message(Form.pred_free)
async def process_pred_free(message: types.Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    try:
        district = int(message.text.strip())
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä–∞–π–æ–Ω–∞.')
        return

    payload = {'district': district}
    status_code, data = await api_post('/prediction/nyc_free', token, payload)
    if status_code == 429:
        await message.reply('–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.', reply_markup=main_menu())
    elif status_code != 201:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}', reply_markup=main_menu())
    else:
        await message.reply(f'–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, ID = {data["id"]}', reply_markup=main_menu())
    await state.clear()


def format_hourly_demand_with_costs(
        hour_start: int,
        demand_str: str,
        costs_str: Optional[str] = None
) -> str:
    if demand_str == '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞':
        return demand_str
    demand_list = ast.literal_eval(demand_str)
    costs_list = ast.literal_eval(costs_str) if costs_str is not None else None

    lines = []
    for i, demand in enumerate(demand_list):
        hour = (hour_start + i - 8) % 24
        line = f'üïí {hour:02d}:00 - üöó {demand} –ø–æ–µ–∑–¥–æ–∫'
        if costs_list is not None:
            cost = costs_list[i]
            line += f', üí∞ {cost:.2f} $ per mile'
        lines.append(line)
    return '\n'.join(lines)


@router.message(Form.pred_id)
async def process_pred_id(message: types.Message, state: FSMContext) -> None:
    tg_id = message.from_user.id
    token = user_tokens.get(tg_id)
    try:
        pred_id = int(message.text.strip())
    except:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).')
        return

    status_code, data = await api_get(f'/prediction/{pred_id}', token)
    if status_code == 404:
        await message.reply('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', reply_markup=main_menu())
    elif status_code != 200:
        await message.reply(f'–û—à–∏–±–∫–∞: {data.get("detail", data)}', reply_markup=main_menu())
    else:
        res_str = data.get('result') or '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
        word = ''
        res = format_hourly_demand_with_costs(data['hour'], res_str, data.get('trip_costs'))
        if data['trip_costs'] is not None:
            word = '–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å '
        await message.reply(
            f'ID: {data["id"]}\n–°—Ç–∞—Ç—É—Å: {data["status"]}\n–°–ø—Ä–æ—Å {word}–ø–æ —á–∞—Å–∞–º:\n{res}',
            reply_markup=main_menu()
        )
    await state.clear()


async def main() -> None:
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
