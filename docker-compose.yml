version: "3.8"

services:
  backend:
    build:
      context: ./app/backend/
      dockerfile: Dockerfile
    container_name: backend
    volumes:
      - ./data:/app/backend/data
      - ./models:/app/backend/models
    ports:
      - "8000:8000"
    env_file:
      - .env

  database:
    image: postgres:16
    container_name: postgres_db
    env_file:
      - .env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    expose:
      - 5432
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  frontend:
#    build:
#      context: ./app/frontend
#      dockerfile: Dockerfile
#    container_name: frontend
#    ports:
#      - "4173:4173"
#
#  web-proxy:
#    image: nginx:latest
#    container_name: nginx_proxy
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - app
#    restart: always
#
#  rabbitmq:
#    image: rabbitmq:3-management
#    container_name: rabbitmq
#    env_file:
#      - .env
#    volumes:
#      - ./data/rabbitmq:/var/lib/rabbitmq
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    restart: on-failure
#    healthcheck:
#      test: [ "CMD", "rabbitmqctl", "status" ]
#      interval: 10s
#      timeout: 10s
#      retries: 5

#  telegram_bot:
#    build:
#      context: .
#      dockerfile: app/tg_bot/Dockerfile
#    container_name: telegram_bot
#    env_file:
#      - .env
#    depends_on:
#      - backend